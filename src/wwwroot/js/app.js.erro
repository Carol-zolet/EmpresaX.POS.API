// API Base URL
const API_BASE = "/api";

// Estado da aplicação
let currentSection = "dashboard";
let contasPagar = [];

// Inicialização
document.addEventListener("DOMContentLoaded", function() {
    console.log("App iniciando...");
    loadDashboard();
});

// Navegação entre seções
function showSection(sectionId) {
    console.log("Mostrando seção:", sectionId);
    
    // Ocultar todas as seções
    document.querySelectorAll(".content-section").forEach(section => {
        section.classList.remove("active");
    });
    
    // Remover classe ativa dos botões
    document.querySelectorAll(".nav-btn").forEach(btn => {
        btn.classList.remove("active");
    });
    
    // Mostrar seção selecionada
    document.getElementById(sectionId).classList.add("active");
    document.getElementById("btn-" + sectionId).classList.add("active");
    
    currentSection = sectionId;
    
    // Carregar dados da seção
    switch(sectionId) {
        case "dashboard":
            loadDashboard();
            break;
        case "contas-pagar":
            loadContasPagar();
            break;
        case "fluxo-caixa":
            loadFluxoCaixa();
            break;
        case "conciliacao":
            loadConciliacao();
            break;
    }
}

// Carregar dashboard
async function loadDashboard() {
    console.log("Carregando dashboard...");
    try {
        const healthResponse = await fetch(API_BASE + "/status/health");
        console.log("Health check:", healthResponse.status);
        
        const fluxo = await fetch(API_BASE + "/fluxocaixa/posicao").then(r => r.json());
        document.getElementById("saldo-atual").textContent = fluxo.posicaoAtual.saldoAtualFormatado;
        
        const contas = await fetch(API_BASE + "/contaspagar/dashboard").then(r => r.json());
        document.getElementById("total-pagar").textContent = contas.resumo.totalAPagarFormatado;
        document.getElementById("vencendo-hoje").textContent = contas.resumo.vencendoHoje;
        
    } catch (error) {
        console.error("Erro ao carregar dashboard:", error);
        document.getElementById("saldo-atual").textContent = "Erro ao carregar";
        document.getElementById("total-pagar").textContent = "Erro ao carregar";
    }
}

// Carregar contas a pagar
async function loadContasPagar() {
    console.log("=== CARREGANDO CONTAS A PAGAR ===");
    try {
        const url = API_BASE + "/contaspagar";
        console.log("URL:", url);
        
        const response = await fetch(url);
        console.log("Status:", response.status);
        
        const data = await response.json();
        console.log("Dados:", data);
        
        if (data && data.contas) {
            contasPagar = data.contas;
            console.log("Contas carregadas:", contasPagar.length);
            renderContasPagar(contasPagar);
        } else {
            console.error("Dados inválidos:", data);
        }
        
    } catch (error) {
        console.error("Erro ao carregar contas:", error);
        document.getElementById("tbody-contas").innerHTML = 
            '<tr><td colspan="6" class="loading">Erro ao carregar: ' + error.message + '</td></tr>';
    }
}

// Carregar fluxo de caixa
async function loadFluxoCaixa() {
    console.log("=== CARREGANDO FLUXO DE CAIXA ===");
    
    // Mostrar loading
    showFluxoCaixaLoading();
    
    try {
        // Carregar dados dos 3 endpoints do FluxoCaixaController
        const [posicaoResponse, movimentacoesResponse, dashboardResponse] = await Promise.all([
            fetch(API_BASE + "/fluxocaixa/posicao"),
            fetch(API_BASE + "/fluxocaixa/movimentacoes"),
            fetch(API_BASE + "/fluxocaixa/dashboard")
        ]);

        console.log("Status posição:", posicaoResponse.status);
        console.log("Status movimentações:", movimentacoesResponse.status);
        console.log("Status dashboard:", dashboardResponse.status);
        
        if (!posicaoResponse.ok || !movimentacoesResponse.ok || !dashboardResponse.ok) {
            throw new Error("Erro ao carregar dados do fluxo de caixa");
        }

        const posicaoData = await posicaoResponse.json();
        const movimentacoesData = await movimentacoesResponse.json();
        const dashboardData = await dashboardResponse.json();
        
        console.log("Dados fluxo carregados:", { posicaoData, movimentacoesData, dashboardData });
        
        // Renderizar os dados na interface
        renderFluxoCaixa(posicaoData.posicaoAtual, movimentacoesData, dashboardData.dashboard);
        
    } catch (error) {
        console.error("Erro ao carregar fluxo de caixa:", error);
        showFluxoCaixaError("Erro ao carregar fluxo de caixa: " + error.message);
    }
}

// Mostrar loading no fluxo de caixa
function showFluxoCaixaLoading() {
    const loadingHtml = '<div class="loading">⏳ Carregando...</div>';
    
    const entradasElement = document.getElementById("entradas-lista");
    const saidasElement = document.getElementById("saidas-lista");
    const saldoElement = document.getElementById("saldo-info");
    const movimentacoesElement = document.getElementById("movimentacoes-lista");
    
    if (entradasElement) entradasElement.innerHTML = loadingHtml;
    if (saidasElement) saidasElement.innerHTML = loadingHtml;
    if (saldoElement) saldoElement.innerHTML = loadingHtml;
    if (movimentacoesElement) movimentacoesElement.innerHTML = loadingHtml;
}

// Mostrar erro no fluxo de caixa
function showFluxoCaixaError(message) {
    const errorHtml = '<div class="error-message">❌ ' + message + '</div>';
    
    const entradasElement = document.getElementById("entradas-lista");
    const saidasElement = document.getElementById("saidas-lista");
    const saldoElement = document.getElementById("saldo-info");
    const movimentacoesElement = document.getElementById("movimentacoes-lista");
    
    if (entradasElement) entradasElement.innerHTML = errorHtml;
    if (saidasElement) saidasElement.innerHTML = errorHtml;
    if (saldoElement) saldoElement.innerHTML = errorHtml;
    if (movimentacoesElement) movimentacoesElement.innerHTML = errorHtml;
}

// Renderizar dados do fluxo de caixa
function renderFluxoCaixa(posicao, movimentacoes, dashboard) {
    console.log("Renderizando fluxo de caixa:", { posicao, movimentacoes, dashboard });
    
    // Renderizar Entradas Previstas
    const entradasElement = document.getElementById("entradas-lista");
    if (entradasElement) {
        entradasElement.innerHTML = 
            '<div class="fluxo-summary">' +
                '<h4 style="margin-bottom: 1rem; color: #27ae60;">💰 Previsões de Entrada</h4>' +
                '<div class="entrada-item" style="display: flex; justify-content: space-between; padding: 0.5rem 0; border-bottom: 1px solid #eee;">' +
                    '<span>Hoje:</span>' +
                    '<span style="color: #27ae60; font-weight: bold;">R$ ' + posicao.entradas.previstasHoje.toFixed(2).replace('.', ',') + '</span>' +
                '</div>' +
                '<div class="entrada-item" style="display: flex; justify-content: space-between; padding: 0.5rem 0; border-bottom: 1px solid #eee;">' +
                    '<span>Próximos 7 dias:</span>' +
                    '<span style="color: #27ae60; font-weight: bold;">R$ ' + posicao.entradas.previstas7Dias.toFixed(2).replace('.', ',') + '</span>' +
                '</div>' +
                '<div class="entrada-item" style="display: flex; justify-content: space-between; padding: 0.5rem 0; border-bottom: 1px solid #eee;">' +
                    '<span>Próximos 30 dias:</span>' +
                    '<span style="color: #27ae60; font-weight: bold;">R$ ' + posicao.entradas.previstas30Dias.toFixed(2).replace('.', ',') + '</span>' +
                '</div>' +
                '<div class="entrada-item total" style="display: flex; justify-content: space-between; padding: 0.5rem 0; font-weight: bold; background: #f8f9fa; margin-top: 0.5rem; padding: 0.75rem;">' +
                    '<span>Realizadas este mês:</span>' +
                    '<span style="color: #27ae60;">R$ ' + posicao.entradas.realizadasMes.toFixed(2).replace('.', ',') + '</span>' +
                '</div>' +
            '</div>';
    }

    // Renderizar Saídas Previstas
    const saidasElement = document.getElementById("saidas-lista");
    if (saidasElement) {
        saidasElement.innerHTML = 
            '<div class="fluxo-summary">' +
                '<h4 style="margin-bottom: 1rem; color: #e74c3c;">💸 Previsões de Saída</h4>' +
                '<div class="saida-item" style="display: flex; justify-content: space-between; padding: 0.5rem 0; border-bottom: 1px solid #eee;">' +
                    '<span>Hoje:</span>' +
                    '<span style="color: #e74c3c; font-weight: bold;">R$ ' + posicao.saidas.previstasHoje.toFixed(2).replace('.', ',') + '</span>' +
                '</div>' +
                '<div class="saida-item" style="display: flex; justify-content: space-between; padding: 0.5rem 0; border-bottom: 1px solid #eee;">' +
                    '<span>Próximos 7 dias:</span>' +
                    '<span style="color: #e74c3c; font-weight: bold;">R$ ' + posicao.saidas.previstas7Dias.toFixed(2).replace('.', ',') + '</span>' +
                '</div>' +
                '<div class="saida-item" style="display: flex; justify-content: space-between; padding: 0.5rem 0; border-bottom: 1px solid #eee;">' +
                    '<span>Próximos 30 dias:</span>' +
                    '<span style="color: #e74c3c; font-weight: bold;">R$ ' + posicao.saidas.previstas30Dias.toFixed(2).replace('.', ',') + '</span>' +
                '</div>' +
                '<div class="saida-item total" style="display: flex; justify-content: space-between; padding: 0.5rem 0; font-weight: bold; background: #f8f9fa; margin-top: 0.5rem; padding: 0.75rem;">' +
                    '<span>Realizadas este mês:</span>' +
                    '<span style="color: #e74c3c;">R$ ' + posicao.saidas.realizadasMes.toFixed(2).replace('.', ',') + '</span>' +
                '</div>' +
            '</div>';
    }

    // Renderizar Saldo Projetado
    const saldoElement = document.getElementById("saldo-info");
    if (saldoElement) {
        const saldoPositivo = posicao.saldoAtual >= 0;
        saldoElement.innerHTML = 
            '<div class="saldo-card" style="text-align: center; padding: 1.5rem; background: ' + (saldoPositivo ? '#d4edda' : '#f8d7da') + '; border-radius: 8px; border: 1px solid ' + (saldoPositivo ? '#c3e6cb' : '#f5c6cb') + ';">' +
                '<h3 style="margin-bottom: 1rem; color: #495057;">📊 Posição Financeira</h3>' +
                '<div class="saldo-valor-principal" style="font-size: 2rem; font-weight: bold; color: ' + (saldoPositivo ? '#155724' : '#721c24') + '; margin-bottom: 1rem;">' +
                    posicao.saldoAtualFormatado +
                '</div>' +
                '<div class="projecoes" style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem; margin-bottom: 1rem;">' +
                    '<div class="projecao-item" style="text-align: center; padding: 0.75rem; background: white; border-radius: 6px; border: 1px solid #dee2e6;">' +
                        '<div style="font-size: 0.9rem; color: #6c757d;">Em 7 dias</div>' +
                        '<div style="font-weight: bold; color: ' + (posicao.projecao.saldo7Dias >= 0 ? '#28a745' : '#dc3545') + ';">R$ ' + posicao.projecao.saldo7Dias.toFixed(2).replace('.', ',') + '</div>' +
                    '</div>' +
                    '<div class="projecao-item" style="text-align: center; padding: 0.75rem; background: white; border-radius: 6px; border: 1px solid #dee2e6;">' +
                        '<div style="font-size: 0.9rem; color: #6c757d;">Em 30 dias</div>' +
                        '<div style="font-weight: bold; color: ' + (posicao.projecao.saldo30Dias >= 0 ? '#28a745' : '#dc3545') + ';">R$ ' + posicao.projecao.saldo30Dias.toFixed(2).replace('.', ',') + '</div>' +
                    '</div>' +
                '</div>' +
                '<div class="tendencia" style="font-size: 1.1rem; margin-bottom: 1rem;">' +
                    'Tendência: <strong style="color: ' + (posicao.projecao.tendencia === 'Positiva' ? '#28a745' : '#dc3545') + ';">' + posicao.projecao.tendencia + '</strong>' +
                '</div>' +
                '<small style="color: #6c757d;">Atualizado: ' + new Date(posicao.dataAtualizacao).toLocaleString('pt-BR') + '</small>' +
            '</div>';
    }

    // Renderizar Movimentações
    const movimentacoesElement = document.getElementById("movimentacoes-lista");
    if (movimentacoesElement) {
        const movimentacoesHtml = movimentacoes.movimentacoes.map(function(mov) {
            return '<div class="movimentacao-item" style="display: grid; grid-template-columns: 80px 1fr 120px 100px 80px; gap: 1rem; padding: 0.75rem; border-bottom: 1px solid #eee; align-items: center;">' +
                '<div class="mov-data" style="font-size: 0.9rem; color: #6c757d;">' + new Date(mov.data).toLocaleDateString('pt-BR') + '</div>' +
                '<div class="mov-desc" style="font-weight: 500;">' + mov.descricao + '</div>' +
                '<div class="mov-categoria" style="font-size: 0.85rem; color: #6c757d; background: #f8f9fa; padding: 0.25rem 0.5rem; border-radius: 4px; text-align: center;">' + mov.categoria + '</div>' +
                '<div class="mov-valor" style="font-weight: bold; text-align: right; color: ' + (mov.valor >= 0 ? '#28a745' : '#dc3545') + ';">' +
                    (mov.valor >= 0 ? '+' : '') + ' R$ ' + Math.abs(mov.valor).toFixed(2).replace('.', ',') +
                '</div>' +
                '<div class="mov-status" style="font-size: 0.8rem; text-align: center;">' +
                    '<span style="padding: 0.25rem 0.5rem; border-radius: 12px; background: ' + (mov.status === 'Realizada' ? '#d4edda' : '#fff3cd') + '; color: ' + (mov.status === 'Realizada' ? '#155724' : '#856404') + ';">' +
                        mov.status +
                    '</span>' +
                '</div>' +
            '</div>';
        }).join('');
        
        movimentacoesElement.innerHTML = 
            '<div class="movimentacoes-container">' +
                '<div class="movimentacoes-header" style="margin-bottom: 1rem;">' +
                    '<h4 style="margin-bottom: 0.5rem;">📋 Movimentações - ' + movimentacoes.periodo.inicio + ' a ' + movimentacoes.periodo.fim + '</h4>' +
                    '<div class="resumo-periodo" style="display: flex; gap: 1rem; flex-wrap: wrap; font-size: 0.9rem;">' +
                        '<span style="background: #d4edda; color: #155724; padding: 0.25rem 0.75rem; border-radius: 4px;">' +
                            '<strong>Entradas:</strong> R$ ' + movimentacoes.resumo.totalEntradas.toFixed(2).replace('.', ',') +
                        '</span>' +
                        '<span style="background: #f8d7da; color: #721c24; padding: 0.25rem 0.75rem; border-radius: 4px;">' +
                            '<strong>Saídas:</strong> R$ ' + movimentacoes.resumo.totalSaidas.toFixed(2).replace('.', ',') +
                        '</span>' +
                        '<span style="background: ' + (movimentacoes.resumo.saldoLiquido >= 0 ? '#d4edda' : '#f8d7da') + '; color: ' + (movimentacoes.resumo.saldoLiquido >= 0 ? '#155724' : '#721c24') + '; padding: 0.25rem 0.75rem; border-radius: 4px;">' +
                            '<strong>Líquido:</strong> ' + movimentacoes.resumo.saldoLiquidoFormatado +
                        '</span>' +
                    '</div>' +
                '</div>' +
                '<div class="movimentacoes-header-table" style="display: grid; grid-template-columns: 80px 1fr 120px 100px 80px; gap: 1rem; padding: 0.5rem 0.75rem; background: #f8f9fa; border-radius: 6px; font-size: 0.85rem; font-weight: bold; color: #495057; margin-bottom: 0.5rem;">' +
                    '<div>Data</div>' +
                    '<div>Descrição</div>' +
                    '<div>Categoria</div>' +
                    '<div style="text-align: right;">Valor</div>' +
                    '<div style="text-align: center;">Status</div>' +
                '</div>' +
                '<div class="movimentacoes-lista">' +
                    movimentacoesHtml +
                '</div>' +
            '</div>';
    }
}

// Filtrar contas
function filtrarContas() {
    const filtro = document.getElementById("filtro-status").value;
    console.log("Filtro selecionado:", filtro);
    
    if (filtro === "todas") {
        renderContasPagar(contasPagar);
    } else {
        const contasFiltradas = contasPagar.filter(function(conta) {
            return conta.status === filtro;
        });
        console.log("Contas filtradas:", contasFiltradas.length);
        renderContasPagar(contasFiltradas);
    }
}

// Placeholder para conciliação
function loadConciliacao() {
    console.log("Carregando conciliação...");
}

// Modal functions
function showModal(modalId) {
    console.log("Mostrando modal:", modalId);
    document.getElementById(modalId).style.display = "block";
}

function closeModal(modalId) {
    console.log("Fechando modal:", modalId);
    document.getElementById(modalId).style.display = "none";
    
    // Limpar formulário e resetar estado de edição
    if (modalId === "modal-nova-conta") {
        document.getElementById("form-nova-conta").reset();
        editandoConta = null;
        
        // Atualizar título do modal
        document.querySelector("#modal-nova-conta .modal-header h3").textContent = "Nova Conta a Pagar";
    }
}

// Função para formatar data
function formatDate(dateString) {
    if (!dateString) return "";
    const date = new Date(dateString);
    return date.toLocaleDateString("pt-BR");
}

// Variável para controlar se está editando
let editandoConta = null;

// Salvar nova conta ou editar existente
async function salvarNovaConta(event) {
    event.preventDefault();
    
    const formData = {
        fornecedor: document.getElementById("fornecedor").value.trim(),
        descricao: document.getElementById("descricao").value.trim(),
        valor: parseFloat(document.getElementById("valor").value),
        vencimento: document.getElementById("vencimento").value,
        categoria: document.getElementById("categoria").value
    };
    
    // Validações básicas
    if (!formData.fornecedor) {
        showNotification("Fornecedor é obrigatório", "error");
        return;
    }
    
    if (!formData.descricao) {
        showNotification("Descrição é obrigatória", "error");
        return;
    }
    
    if (!formData.valor || formData.valor <= 0) {
        showNotification("Valor deve ser maior que zero", "error");
        return;
    }
    
    if (!formData.vencimento) {
        showNotification("Data de vencimento é obrigatória", "error");
        return;
    }
    
    try {
        if (editandoConta) {
            // Editando conta existente
            await editarContaReal(editandoConta.id, formData);
        } else {
            // Criando nova conta
            await criarNovaContaReal(formData);
        }
        
        // Recarregar lista de contas
        await loadContasPagar();
        closeModal("modal-nova-conta");
        
    } catch (error) {
        console.error("Erro ao salvar conta:", error);
        showNotification("Erro ao salvar conta: " + error.message, "error");
    }
}

// Criar nova conta (simulação de POST para API)
async function criarNovaContaReal(dadosConta) {
    console.log("Criando nova conta:", dadosConta);
    
    // Simular criação local (em produção seria POST /api/contaspagar)
    const novaConta = {
        id: Date.now(),
        fornecedor: dadosConta.fornecedor,
        descricao: dadosConta.descricao,
        valor: dadosConta.valor,
        vencimento: dadosConta.vencimento,
        categoria: dadosConta.categoria,
        status: "Pendente"
    };
    
    // Adicionar à lista local
    contasPagar.unshift(novaConta);
    
    showNotification("Conta criada com sucesso!", "success");
}

// Editar conta existente (simulação de PUT para API)
async function editarContaReal(id, dadosAtualizados) {
    console.log("Editando conta:", id, dadosAtualizados);
    
    // Simular edição local (em produção seria PUT /api/contaspagar/{id})
    const indice = contasPagar.findIndex(function(c) { return c.id === id; });
    if (indice !== -1) {
        contasPagar[indice] = {
            id: contasPagar[indice].id,
            fornecedor: dadosAtualizados.fornecedor,
            descricao: dadosAtualizados.descricao,
            valor: dadosAtualizados.valor,
            vencimento: dadosAtualizados.vencimento,
            categoria: dadosAtualizados.categoria,
            status: contasPagar[indice].status
        };
        
        showNotification("Conta atualizada com sucesso!", "success");
    }
}

// Editar conta - abrir modal preenchido
function editarConta(id) {
    const conta = contasPagar.find(function(c) { return c.id === id; });
    if (!conta) {
        showNotification("Conta não encontrada", "error");
        return;
    }
    
    console.log("Editando conta:", conta);
    
    // Armazenar conta sendo editada
    editandoConta = conta;
    
    // Preencher formulário
    document.getElementById("fornecedor").value = conta.fornecedor;
    document.getElementById("descricao").value = conta.descricao;
    document.getElementById("valor").value = conta.valor;
    document.getElementById("vencimento").value = conta.vencimento;
    document.getElementById("categoria").value = conta.categoria || "";
    
    // Alterar título do modal
    document.querySelector("#modal-nova-conta .modal-header h3").textContent = "Editar Conta a Pagar";
    
    // Abrir modal
    showModal("modal-nova-conta");
}

// Marcar conta como paga
async function marcarComoPaga(id) {
    if (!confirm("Confirma o pagamento desta conta?")) {
        return;
    }
    
    try {
        const conta = contasPagar.find(function(c) { return c.id === id; });
        if (conta) {
            // Simular atualização (em produção seria PUT /api/contaspagar/{id}/pagar)
            conta.status = "Paga";
            conta.dataPagamento = new Date().toISOString().split('T')[0];
            
            // Re-renderizar tabela
            const filtroAtual = document.getElementById("filtro-status").value;
            if (filtroAtual === "todas") {
                renderContasPagar(contasPagar);
            } else {
                filtrarContas();
            }
            
            showNotification('Conta "' + conta.fornecedor + '" marcada como paga!', "success");
        }
    } catch (error) {
        console.error("Erro ao marcar como paga:", error);
        showNotification("Erro ao atualizar conta", "error");
    }
}

// Excluir conta
async function excluirConta(id) {
    const conta = contasPagar.find(function(c) { return c.id === id; });
    if (!conta) {
        showNotification("Conta não encontrada", "error");
        return;
    }
    
    if (!confirm('Confirma a exclusão da conta "' + conta.fornecedor + '"?\n\nEsta ação não pode ser desfeita.')) {
        return;
    }
    
    try {
        // Simular exclusão (em produção seria DELETE /api/contaspagar/{id})
        const indice = contasPagar.findIndex(function(c) { return c.id === id; });
        if (indice !== -1) {
            contasPagar.splice(indice, 1);
            
            // Re-renderizar tabela
            const filtroAtual = document.getElementById("filtro-status").value;
            if (filtroAtual === "todas") {
                renderContasPagar(contasPagar);
            } else {
                filtrarContas();
            }
            
            showNotification("Conta excluída com sucesso!", "success");
        }
    } catch (error) {
        console.error("Erro ao excluir conta:", error);
        showNotification("Erro ao excluir conta", "error");
    }
}

// Renderizar tabela de contas a pagar
function renderContasPagar(contas) {
    const tbody = document.getElementById("tbody-contas");
    
    if (!contas || contas.length === 0) {
        tbody.innerHTML = '<tr><td colspan="6" class="loading">Nenhuma conta encontrada</td></tr>';
        return;
    }
    
    const htmlRows = [];
    for (let i = 0; i < contas.length; i++) {
        const conta = contas[i];
        const dataVencimento = new Date(conta.vencimento);
        const hoje = new Date();
        const diffTime = dataVencimento - hoje;
        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
        
        let statusClass = conta.status.toLowerCase();
        if (conta.status === "Pendente" && diffDays < 0) {
            statusClass = "vencida";
        }
        
        let alertaVencimento = '';
        if (diffDays < 0 && conta.status === "Pendente") {
            alertaVencimento = '<br><small style="color: #e74c3c;">' + Math.abs(diffDays) + ' dias em atraso</small>';
        } else if (diffDays <= 7 && diffDays >= 0 && conta.status === "Pendente") {
            alertaVencimento = '<br><small style="color: #f39c12;">Vence em ' + diffDays + ' dias</small>';
        }
        
        const botaoPagar = conta.status === 'Pendente' ? 
            '<button onclick="marcarComoPaga(' + conta.id + ')" class="btn-primary" style="padding: 0.25rem 0.5rem; font-size: 0.75rem; margin-right: 0.25rem;"><i class="fas fa-check"></i> Pagar</button>' : '';
        
        htmlRows.push(
            '<tr>' +
                '<td><strong>' + conta.fornhtmlRows.push(
            '<tr>' +
                '<td><strong>' + conta.fornecedor + '</strong></td>' +
                '<td>' + conta.descricao + '</td>' +
                '<td><strong>R$ ' + conta.valor.toLocaleString('pt-BR', {minimumFractionDigits: 2}) + '</strong></td>' +
                '<td>' + formatDate(conta.vencimento) + alertaVencimento + '</td>' +
                '<td><span class="status-' + statusClass + '">' + conta.status + '</span></td>' +
                '<td>' +
                    '<div style="display: flex; gap: 0.25rem; flex-wrap: wrap;">' +
                        '<button onclick="editarConta(' + conta.id + ')" class="btn-secondary" style="padding: 0.25rem 0.5rem; font-size: 0.75rem;"><i class="fas fa-edit"></i> Editar</button>' +
                        botaoPagar +
                        '<button onclick="excluirConta(' + conta.id + ')" style="background: #e74c3c; color: white; border: none; padding: 0.25rem 0.5rem; font-size: 0.75rem; border-radius: 3px; cursor: pointer;"><i class="fas fa-trash"></i> Excluir</button>' +
                    '</div>' +
                '</td>' +
            '</tr>'
        );
    }
    
    tbody.innerHTML = htmlRows.join('');
}

// Sistema de notificações melhorado
function showNotification(message, type) {
    if (typeof type === 'undefined') {
        type = "info";
    }
    
    // Remover notificações anteriores
    const existingNotifications = document.querySelectorAll('.notification');
    existingNotifications.forEach(function(n) {
        n.remove();
    });
    
    const notification = document.createElement("div");
    notification.className = 'notification notification-' + type;
    
    const iconClass = type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-circle' : 'info-circle';
    const bgColor = type === 'success' ? '#27ae60' : type === 'error' ? '#e74c3c' : '#3498db';
    
    notification.innerHTML = 
        '<div style="display: flex; align-items: center; gap: 0.5rem;">' +
            '<i class="fas fa-' + iconClass + '"></i>' +
            '<span>' + message + '</span>' +
        '</div>' +
        '<button onclick="this.parentElement.remove()" style="background: none; border: none; color: inherit; font-size: 1.2rem; cursor: pointer; padding: 0;">&times;</button>';
    
    notification.style.cssText = 
        'position: fixed;' +
        'top: 20px;' +
        'right: 20px;' +
        'padding: 1rem 1.5rem;' +
        'border-radius: 6px;' +
        'color: white;' +
        'z-index: 10000;' +
        'display: flex;' +
        'justify-content: space-between;' +
        'align-items: center;' +
        'min-width: 350px;' +
        'background: ' + bgColor + ';' +
        'box-shadow: 0 4px 12px rgba(0,0,0,0.15);' +
        'animation: slideInRight 0.3s ease-out;';
    
    document.body.appendChild(notification);
    
    setTimeout(function() {
        if (notification.parentElement) {
            notification.style.animation = 'slideOutRight 0.3s ease-in';
            setTimeout(function() {
                notification.remove();
            }, 300);
        }
    }, 4000);
}

// Adicionar CSS para animações e estilos
const style = document.createElement('style');
style.textContent = 
    '@keyframes slideInRight {' +
        'from { transform: translateX(100%); opacity: 0; }' +
        'to { transform: translateX(0); opacity: 1; }' +
    '}' +
    '@keyframes slideOutRight {' +
        'from { transform: translateX(0); opacity: 1; }' +
        'to { transform: translateX(100%); opacity: 0; }' +
    '}' +
    '.loading {' +
        'text-align: center;' +
        'padding: 2rem;' +
        'color: #6c757d;' +
        'font-style: italic;' +
    '}' +
    '.error-message {' +
        'text-align: center;' +
        'padding: 2rem;' +
        'color: #dc3545;' +
        'background: #f8d7da;' +
        'border: 1px solid #f5c6cb;' +
        'border-radius: 6px;' +
        'margin: 1rem;' +
    '}' +
    '.status-pendente {' +
        'background: #fff3cd;' +
        'color: #856404;' +
        'padding: 0.25rem 0.5rem;' +
        'border-radius: 4px;' +
        'font-size: 0.85rem;' +
    '}' +
    '.status-paga {' +
        'background: #d4edda;' +
        'color: #155724;' +
        'padding: 0.25rem 0.5rem;' +
        'border-radius: 4px;' +
        'font-size: 0.85rem;' +
    '}' +
    '.status-vencida {' +
        'background: #f8d7da;' +
        'color: #721c24;' +
        'padding: 0.25rem 0.5rem;' +
        'border-radius: 4px;' +
        'font-size: 0.85rem;' +
    '}' +
    '.btn-primary {' +
        'background: #007bff;' +
        'color: white;' +
        'border: none;' +
        'border-radius: 3px;' +
        'cursor: pointer;' +
    '}' +
    '.btn-primary:hover {' +
        'background: #0056b3;' +
    '}' +
    '.btn-secondary {' +
        'background: #6c757d;' +
        'color: white;' +
        'border: none;' +
        'border-radius: 3px;' +
        'cursor: pointer;' +
    '}' +
    '.btn-secondary:hover {' +
        'background: #545b62;' +
    '}';

document.head.appendChild(style);