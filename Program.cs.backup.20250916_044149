// ──────────────────────────────────────────────────────────────
//  Program.cs – Startup “minimal” (já com JWT, CORS, Swagger, Serilog)
// ──────────────────────────────────────────────────────────────

using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.IdentityModel.Tokens;
using Serilog;
using System.Text;
using Microsoft.OpenApi.Models;

var builder = WebApplication.CreateBuilder(args);

// ----------------- 1️⃣  Logging com Serilog  -----------------
builder.Host.UseSerilog((hostingContext, loggerConfiguration) =>
{
    loggerConfiguration.ReadFrom.Configuration(hostingContext.Configuration); // adapta ao appsettings
});

// ----------------- 2️⃣  Concessão de serviços ----------------
// 2.1  Controllers
builder.Services.AddControllers();

// 2.2  Swagger (já com configuração de JWT abaixo)
builder.Services.AddSwaggerGen(c =>
{
    var securityScheme = new OpenApiSecurityScheme
    {
        Name = "Authorization",
        BearerFormat = "JWT",
        Scheme = "bearer",
        In = ParameterLocation.Header,
        Type = SecuritySchemeType.Http,
        Description = "Digite o token JWT",
    };
    c.AddSecurityDefinition("Bearer", securityScheme);
    c.AddSecurityRequirement(new OpenApiSecurityRequirement
    {
        { securityScheme, Array.Empty<string>() }
    });

    // Se quiser adicionar descrição do API
    c.SwaggerDoc("v1", new OpenApiInfo
    {
        Title = "EmpresaX.POS.API",
        Version = "v1",
        Description = "API para Sistema de Ponto de Venda",
        Contact = new OpenApiContact
        {
            Name = "EmpresaX",
            Email = "contato@empresax.com"
        }
    });
});

// 2.3  CORS
builder.Services.AddCors(options =>
{
    options.AddPolicy(builder.Configuration["Cors:PolicyName"], policy =>
    {
        policy.WithOrigins(
                builder.Configuration.GetSection("Cors:Origins").Get<string[]>())
              .AllowAnyHeader()
              .AllowAnyMethod();
    });
});

// 2.4  JWT
builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
    .AddJwtBearer(options =>
    {
        options.TokenValidationParameters = new TokenValidationParameters
        {
            ValidateIssuer = true,
            ValidateAudience = true,
            ValidateLifetime = true,
            ValidateIssuerSigningKey = true,
            ValidIssuer = builder.Configuration["Jwt:Issuer"],
            ValidAudience = builder.Configuration["Jwt:Audience"],
            IssuerSigningKey = new SymmetricSecurityKey(
                Encoding.UTF8.GetBytes(builder.Configuration["Jwt:Key"]))
        };
    });

var app = builder.Build();

// ----------------- 3️⃣  Pipeline -----------------
if (app.Environment.IsDevelopment())
{
    app.UseDeveloperExceptionPage();

    // habilita Swagger
    app.UseSwagger();
    app.UseSwaggerUI(c => c.SwaggerEndpoint("/swagger/v1/swagger.json", "EmpresaX POS API v1"));
}

// 3.1  HTTPS redirecionamento opcional
app.UseHttpsRedirection();

// 3.2  Cors + Auth
app.UseCors();
app.UseAuthentication();
app.UseAuthorization();

app.MapControllers();   // rota padrão : /api/[Controller]

// 3.3  Endpoint simples (exemplo, pode ser removido)
app.MapGet("/", () => new
{
    message = "EmpresaX POS API - Teste Mínimo",
    controllers = new[] { "BaseController", "StatusController", "TesteController" }
});

app.Run();
