using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;
using EmpresaX.POS.API.Services;
using System.Security.Claims;

namespace EmpresaX.POS.API.Controllers
{
    [ApiController]
    [Route("api/v1/auth")]
    public class AuthController : ControllerBase
    {
        private readonly IAuthenticationService _authService;
        private readonly ILogger<AuthController> _logger;

        public AuthController(IAuthenticationService authService, ILogger<AuthController> logger)
        {
            _authService = authService;
            _logger = logger;
        }

        [HttpPost("login")]
        public async Task<ActionResult<LoginResponse>> Login([FromBody] LoginDto request)
        {
            try
            {
                var enderecoIP = ObterEnderecoIP();
                var resultado = await _authService.LoginAsync(request, enderecoIP);

                if (resultado.Sucesso)
                {
                    return Ok(resultado);
                }

                return BadRequest(resultado);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Erro no endpoint de login");
                return StatusCode(500, new { sucesso = false, erro = "Erro interno do servidor" });
            }
        }

        [HttpGet("status")]
        public ActionResult Status()
        {
            return Ok(new 
            { 
                auth = "JWT funcionando", 
                data = DateTime.Now,
                versao = "1.1.0"
            });
        }

        [HttpGet("test")]
        public ActionResult Test()
        {
            return Ok(new { mensagem = "JWT Service ativo", timestamp = DateTime.Now });
        }

        private string ObterEnderecoIP()
        {
            return Request.Headers.ContainsKey("X-Forwarded-For") 
                ? Request.Headers["X-Forwarded-For"].ToString() 
                : HttpContext.Connection.RemoteIpAddress?.ToString() ?? "Desconhecido";
        }
    }
}
