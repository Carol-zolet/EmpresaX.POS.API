using Microsoft.AspNetCore.Mvc;
using EmpresaX.POS.API.Models;

namespace EmpresaX.POS.API.Controllers
{
    [ApiController]
    [Route("api/v1/access-control")]
    public class AccessControlController : BaseController
    {
        [HttpPost("entry-authorize")]
        public ActionResult<object> EntryAuthorize([FromBody] EntryAuthorizeRequest request)
        {
            try
            {
                var authResult = ValidateAccess(request);
                
                // Log da tentativa de acesso
                LogAccessAttempt(request, authResult);

                return Ok(new
                {
                    authorized = authResult.Authorized,
                    message = authResult.Message,
                    messageCustom = authResult.CustomMessage,
                    entryId = authResult.EntryId,
                    photoUrl = authResult.PhotoUrl,
                    totalFitcoins = (int?)null, // Não aplicável ao sistema financeiro
                    document = authResult.Document,
                    planIdPassage = (int?)null, // Não aplicável ao sistema financeiro
                    planName = authResult.PlanName,
                    name = authResult.Name,
                    id = authResult.Id,
                    passageDirection = "Entry", // Sempre entrada no sistema
                    blockedType = (int)authResult.BlockedType,
                    permissions = authResult.Permissions,
                    accessTime = DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss"),
                    sessionTimeout = authResult.SessionTimeout
                });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { 
                    authorized = false,
                    message = "Erro interno do servidor",
                    blockedType = (int)BlockedType.SemPermissao,
                    erro = ex.Message 
                });
            }
        }

        [HttpGet("access-history")]
        public ActionResult<object> GetAccessHistory([FromQuery] int take = 50, [FromQuery] int skip = 0,
                                                    [FromQuery] int? userId = null, [FromQuery] string dateStart = "",
                                                    [FromQuery] string dateEnd = "", [FromQuery] string accessType = "")
        {
            try
            {
                var history = GetAccessHistoryData();

                if (userId.HasValue)
                {
                    history = history.Where(h => h.UserId == userId.Value);
                }

                if (!string.IsNullOrEmpty(dateStart) && DateTime.TryParse(dateStart, out var startDate))
                {
                    history = history.Where(h => h.AccessTime >= startDate);
                }

                if (!string.IsNullOrEmpty(dateEnd) && DateTime.TryParse(dateEnd, out var endDate))
                {
                    history = history.Where(h => h.AccessTime <= endDate);
                }

                if (!string.IsNullOrEmpty(accessType))
                {
                    history = history.Where(h => h.AccessType.Contains(accessType, StringComparison.OrdinalIgnoreCase));
                }

                return Ok(CreatePaginatedResponse(history.OrderByDescending(h => h.AccessTime), take, skip));
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { erro = ex.Message });
            }
        }

        [HttpGet("blocked-types")]
        public ActionResult<object> GetBlockedTypes()
        {
            try
            {
                var blockedTypes = Enum.GetValues<BlockedType>()
                    .Select(bt => new
                    {
                        code = (int)bt,
                        name = bt.ToString(),
                        description = GetBlockedTypeDescription(bt)
                    });

                return Ok(new
                {
                    sucesso = true,
                    blockedTypes = blockedTypes
                });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { erro = ex.Message });
            }
        }

        private AccessAuthorizationResult ValidateAccess(EntryAuthorizeRequest request)
        {
            // Buscar usuário
            var user = GetUserById(request.Id);
            
            if (user == null)
            {
                return new AccessAuthorizationResult
                {
                    Authorized = false,
                    Message = "Usuário não encontrado",
                    CustomMessage = "ID de usuário inválido",
                    BlockedType = BlockedType.UsuarioInexistente,
                    EntryId = 0
                };
            }

            // Verificar se usuário está ativo
            if (user.Status != UserStatus.Active)
            {
                return new AccessAuthorizationResult
                {
                    Authorized = false,
                    Message = "Conta inativa ou bloqueada",
                    CustomMessage = "Entre em contato com o administrador",
                    BlockedType = BlockedType.ContaInativa,
                    Id = user.Id,
                    Name = user.Name,
                    PhotoUrl = user.Photo,
                    Document = user.Document,
                    EntryId = 0
                };
            }

            // Verificar permissões do módulo
            if (!HasModuleAccess(user, request.Module))
            {
                return new AccessAuthorizationResult
                {
                    Authorized = false,
                    Message = "Sem permissão para acessar este módulo",
                    CustomMessage = $"Acesso negado ao módulo {request.Module}",
                    BlockedType = BlockedType.SemPermissao,
                    Id = user.Id,
                    Name = user.Name,
                    PhotoUrl = user.Photo,
                    Document = user.Document,
                    EntryId = 0
                };
            }

            // Verificar horário de acesso
            if (!IsAccessTimeAllowed(user))
            {
                return new AccessAuthorizationResult
                {
                    Authorized = false,
                    Message = "Acesso fora do horário permitido",
                    CustomMessage = "Acesso permitido apenas durante o horário comercial",
                    BlockedType = BlockedType.ForaHorario,
                    Id = user.Id,
                    Name = user.Name,
                    PhotoUrl = user.Photo,
                    Document = user.Document,
                    EntryId = 0
                };
            }

            // Acesso autorizado
            return new AccessAuthorizationResult
            {
                Authorized = true,
                Message = "Acesso autorizado",
                CustomMessage = $"Bem-vindo, {user.Name}",
                BlockedType = BlockedType.SemBloqueio,
                Id = user.Id,
                Name = user.Name,
                PhotoUrl = user.Photo,
                Document = user.Document,
                PlanName = user.Department,
                EntryId = DateTime.Now.Ticks,
                Permissions = GetUserPermissions(user.Role),
                SessionTimeout = 120 // 2 horas
            };
        }

        private User? GetUserById(int id)
        {
            var usuarios = new List<User>
            {
                new User { Id = 1, Name = "Administrador", Email = "admin@empresax.com", Role = UserRole.Admin, Status = UserStatus.Active, Department = "TI", Photo = "/images/admin.jpg", Document = "123.456.789-00" },
                new User { Id = 2, Name = "João Silva", Email = "financeiro@empresax.com", Role = UserRole.Financeiro, Status = UserStatus.Active, Department = "Financeiro", Photo = "/images/joao.jpg", Document = "987.654.321-00" },
                new User { Id = 3, Name = "Maria Santos", Email = "vendas@empresax.com", Role = UserRole.Vendas, Status = UserStatus.Active, Department = "Vendas", Photo = "/images/maria.jpg", Document = "456.789.123-00" }
            };

            return usuarios.FirstOrDefault(u => u.Id == id);
        }

        private bool HasModuleAccess(User user, string module)
        {
            var modulePermissions = new Dictionary<UserRole, string[]>
            {
                [UserRole.Admin] = new[] { "all" },
                [UserRole.Financeiro] = new[] { "dashboard", "contas_pagar", "contas_receber", "fluxo_caixa", "relatorios" },
                [UserRole.Vendas] = new[] { "dashboard", "vendas", "clientes", "relatorios_vendas" },
                [UserRole.User] = new[] { "dashboard" }
            };

            if (!modulePermissions.ContainsKey(user.Role))
                return false;

            var permissions = modulePermissions[user.Role];
            return permissions.Contains("all") || permissions.Contains(module);
        }

        private bool IsAccessTimeAllowed(User user)
        {
            // Admin pode acessar a qualquer hora
            if (user.Role == UserRole.Admin)
                return true;

            var now = DateTime.Now;
            var isBusinessDay = now.DayOfWeek != DayOfWeek.Saturday && now.DayOfWeek != DayOfWeek.Sunday;
            var isBusinessHour = now.Hour >= 8 && now.Hour <= 18;

            return isBusinessDay && isBusinessHour;
        }

        private string[] GetUserPermissions(UserRole role)
        {
            return role switch
            {
                UserRole.Admin => new[] { "all" },
                UserRole.Financeiro => new[] { "contas_pagar", "contas_receber", "fluxo_caixa", "relatorios" },
                UserRole.Vendas => new[] { "vendas", "clientes", "relatorios_vendas" },
                UserRole.User => new[] { "dashboard" },
                _ => new[] { "dashboard" }
            };
        }

        private void LogAccessAttempt(EntryAuthorizeRequest request, AccessAuthorizationResult result)
        {
            Console.WriteLine($"[{DateTime.Now}] Access Attempt - User: {request.Id}, Module: {request.Module}, Authorized: {result.Authorized}, Reason: {result.Message}");
        }

        private IEnumerable<object> GetAccessHistoryData()
        {
            return new[]
            {
                new { UserId = 1, UserName = "Administrador", AccessTime = DateTime.Now.AddMinutes(-30), AccessType = "Login", Module = "Dashboard", Authorized = true, IpAddress = "192.168.1.100" },
                new { UserId = 2, UserName = "João Silva", AccessTime = DateTime.Now.AddMinutes(-15), AccessType = "Module Access", Module = "Contas a Pagar", Authorized = true, IpAddress = "192.168.1.101" },
                new { UserId = 3, UserName = "Maria Santos", AccessTime = DateTime.Now.AddMinutes(-5), AccessType = "Module Access", Module = "Relatórios", Authorized = false, IpAddress = "192.168.1.102" }
            };
        }

        private string GetBlockedTypeDescription(BlockedType blockedType)
        {
            return blockedType switch
            {
                BlockedType.SemBloqueio => "Sem bloqueio",
                BlockedType.UsuarioInexistente => "Usuário não encontrado",
                BlockedType.SemPermissao => "Sem permissão para este módulo",
                BlockedType.ContaInativa => "Conta de usuário inativa",
                BlockedType.AcessoSuspenso => "Acesso temporariamente suspenso",
                BlockedType.LimiteTentativas => "Limite de tentativas de login excedido",
                BlockedType.ForaHorario => "Acesso fora do horário permitido",
                BlockedType.DispositivoNaoAutorizado => "Dispositivo não autorizado",
                BlockedType.SessaoExpirada => "Sessão expirada",
                BlockedType.AutenticacaoObrigatoria => "Necessária autenticação de dois fatores",
                BlockedType.PendenciasFinanceiras => "Conta com pendências financeiras",
                BlockedType.AprovacaoNecessaria => "Acesso apenas mediante aprovação",
                BlockedType.ModuloManutencao => "Módulo em manutenção",
                BlockedType.LicencaExpirada => "Licença do sistema expirada",
                BlockedType.LimiteUsuarios => "Limite de usuários simultâneos atingido",
                _ => "Bloqueio desconhecido"
            };
        }
    }

    public class EntryAuthorizeRequest
    {
        public int Id { get; set; }
        public int PersonType { get; set; } = 1; // 1: Cliente, 2: Oportunidade, 3: Colaborador, 4: Personal
        public int Device { get; set; } = 1; // 1: Digital, 2: QR Code, 3: Facial, 4: Teclado
        public int? IdManualEntry { get; set; }
        public decimal? Temperature { get; set; }
        public int? ClimateId { get; set; }
        public int IdTurnstile { get; set; } = 1;
        public string Module { get; set; } = "dashboard"; // Módulo que está tentando acessar
        public string Action { get; set; } = "view"; // Ação que está tentando realizar
    }

    public class AccessAuthorizationResult
    {
        public bool Authorized { get; set; }
        public string Message { get; set; } = string.Empty;
        public string CustomMessage { get; set; } = string.Empty;
        public long EntryId { get; set; }
        public string PhotoUrl { get; set; } = string.Empty;
        public string Document { get; set; } = string.Empty;
        public string PlanName { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
        public int Id { get; set; }
        public BlockedType BlockedType { get; set; }
        public string[] Permissions { get; set; } = Array.Empty<string>();
        public int SessionTimeout { get; set; } = 120;
    }
}
