using Microsoft.AspNetCore.Mvc;
using OfficeOpenXml;
using System.Globalization;

namespace EmpresaX.POS.API.Controllers
{
    [ApiController]
    [Route("api/v1/financeiro/contas-pagar")]
    public class ContasPagarController : BaseController
    {
        private static List<ContaPagarModel> _contasReais = new List<ContaPagarModel>();

        static ContasPagarController()
        {
            // Configurar licença EPPlus uma única vez
            // // Licença configurada no Program.cs // Removido - obsoleto no EPPlus 8
        }

        [HttpGet]
        public ActionResult<object> GetContasPagar([FromQuery] int take = 50, [FromQuery] int skip = 0)
        {
            try
            {
                var contas = _contasReais.Any() ? _contasReais.Cast<object>() : GetContasPagarData();
                return Ok(CreatePaginatedResponse(contas, take, skip));
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { erro = ex.Message });
            }
        }

        [HttpPost("importar-excel")]
        public async Task<ActionResult<object>> ImportarExcel(IFormFile arquivo)
        {
            try
            {
                if (arquivo == null || arquivo.Length == 0)
                    return BadRequest(new { erro = "Nenhum arquivo foi selecionado" });

                var extensao = Path.GetExtension(arquivo.FileName).ToLower();
                if (extensao != ".xlsx")
                    return BadRequest(new { erro = "Apenas arquivos Excel (.xlsx) são aceitos" });

                using var stream = new MemoryStream();
                await arquivo.CopyToAsync(stream);
                
                using var package = new ExcelPackage(stream);
                
                if (package.Workbook.Worksheets.Count == 0)
                    return BadRequest(new { erro = "Planilha não contém abas válidas" });

                var worksheet = package.Workbook.Worksheets[0];
                
                if (worksheet.Dimension == null)
                    return BadRequest(new { erro = "Planilha está vazia" });

                var contasImportadas = new List<ContaPagarModel>();
                var erros = new List<string>();
                
                // Ler dados da planilha (pulando linha do cabeçalho)
                for (int row = 2; row <= worksheet.Dimension.Rows; row++)
                {
                    try
                    {
                        var fornecedor = worksheet.Cells[row, 1].Value?.ToString()?.Trim();
                        var descricao = worksheet.Cells[row, 2].Value?.ToString()?.Trim();
                        var valorStr = worksheet.Cells[row, 3].Value?.ToString()?.Trim();
                        var vencimentoValue = worksheet.Cells[row, 4].Value;
                        var status = worksheet.Cells[row, 5].Value?.ToString()?.Trim();

                        // Validações
                        if (string.IsNullOrEmpty(fornecedor))
                        {
                            erros.Add($"Linha {row}: Fornecedor é obrigatório");
                            continue;
                        }

                        if (string.IsNullOrEmpty(valorStr))
                        {
                            erros.Add($"Linha {row}: Valor é obrigatório");
                            continue;
                        }

                        // Converter valor
                        decimal valor = 0;
                        if (!ConvertValue(valorStr, out valor))
                        {
                            erros.Add($"Linha {row}: Valor inválido '{valorStr}'");
                            continue;
                        }

                        // Converter data
                        DateTime vencimento = DateTime.Now.AddDays(30);
                        if (vencimentoValue != null)
                        {
                            if (vencimentoValue is DateTime dt)
                            {
                                vencimento = dt;
                            }
                            else if (!DateTime.TryParse(vencimentoValue.ToString(), out vencimento))
                            {
                                erros.Add($"Linha {row}: Data de vencimento inválida");
                                vencimento = DateTime.Now.AddDays(30);
                            }
                        }

                        // Validar status
                        var statusValidos = new[] { "Pendente", "Paga", "Vencida" };
                        if (string.IsNullOrEmpty(status) || !statusValidos.Contains(status))
                        {
                            status = "Pendente";
                        }

                        contasImportadas.Add(new ContaPagarModel
                        {
                            id = contasImportadas.Count + 1,
                            fornecedor = fornecedor,
                            descricao = descricao ?? "Sem descrição",
                            valor = valor,
                            vencimento = vencimento.ToString("yyyy-MM-dd"),
                            status = status,
                            categoria = "Importado",
                            diasAtraso = CalcularDiasAtraso(vencimento, status),
                            createdAt = DateTime.Now.ToString("dd/MM/yyyy"),
                            updatedAt = DateTime.Now.ToString("dd/MM/yyyy HH:mm")
                        });
                    }
                    catch (Exception ex)
                    {
                        erros.Add($"Linha {row}: Erro inesperado - {ex.Message}");
                    }
                }

                if (contasImportadas.Count == 0)
                {
                    return BadRequest(new { 
                        erro = "Nenhuma conta válida foi encontrada", 
                        detalhes = erros 
                    });
                }

                // Atualizar dados em memória
                _contasReais = contasImportadas;

                return Ok(new
                {
                    sucesso = true,
                    mensagem = $"{contasImportadas.Count} contas importadas com sucesso",
                    total = contasImportadas.Count,
                    erros = erros.Count > 0 ? erros : null,
                    preview = contasImportadas.Take(3)
                });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { 
                    erro = "Erro interno ao processar planilha", 
                    detalhes = ex.Message 
                });
            }
        }

        [HttpPost("limpar-dados")]
        public ActionResult<object> LimparDados()
        {
            _contasReais.Clear();
            return Ok(new { 
                sucesso = true, 
                mensagem = "Dados importados removidos. Sistema voltou aos dados de exemplo." 
            });
        }

        [HttpGet("estatisticas")]
        public ActionResult<object> GetEstatisticas()
        {
            var contas = _contasReais.Any() ? _contasReais : GetContasPagarData().Cast<ContaPagarModel>();
            
            var total = contas.Sum(c => c.valor);
            var pendentes = contas.Where(c => c.status == "Pendente").Sum(c => c.valor);
            var pagas = contas.Where(c => c.status == "Paga").Sum(c => c.valor);
            var vencidas = contas.Where(c => c.status == "Vencida").Sum(c => c.valor);

            return Ok(new
            {
                sucesso = true,
                total = total,
                totalFormatado = total.ToString("C", new CultureInfo("pt-BR")),
                pendentes = pendentes,
                pendentesFormatado = pendentes.ToString("C", new CultureInfo("pt-BR")),
                pagas = pagas,
                pagasFormatado = pagas.ToString("C", new CultureInfo("pt-BR")),
                vencidas = vencidas,
                vencidasFormatado = vencidas.ToString("C", new CultureInfo("pt-BR")),
                quantidadeTotal = contas.Count(),
                quantidadePendentes = contas.Count(c => c.status == "Pendente"),
                quantidadeVencidas = contas.Count(c => c.status == "Vencida")
            });
        }

        private bool ConvertValue(string valorStr, out decimal valor)
        {
            valor = 0;

            if (string.IsNullOrEmpty(valorStr))
                return false;

            // Limpar string do valor
            var cleanValue = valorStr
                .Replace("R$", "")
                .Replace(" ", "")
                .Trim();

            // Tentar diferentes formatos
            var cultures = new[] { 
                new CultureInfo("pt-BR"), 
                new CultureInfo("en-US"), 
                CultureInfo.InvariantCulture 
            };

            foreach (var culture in cultures)
            {
                if (decimal.TryParse(cleanValue, NumberStyles.Currency | NumberStyles.Number, culture, out valor))
                    return true;
            }

            return false;
        }

        private int CalcularDiasAtraso(DateTime vencimento, string status)
        {
            if (status != "Pendente" && status != "Vencida")
                return 0;

            var diff = (DateTime.Now - vencimento).Days;
            return diff > 0 ? diff : 0;
        }

        private IEnumerable<ContaPagarModel> GetContasPagarData()
        {
            return new[]
            {
                new ContaPagarModel { id = 1, fornecedor = "Fornecedor ABC Ltda", descricao = "Material de escritório", valor = 1250.00m, vencimento = "2024-12-14", status = "Pendente", categoria = "Despesas Administrativas", diasAtraso = 267, createdAt = "01/11/2024", updatedAt = "07/09/2025 21:59" },
                new ContaPagarModel { id = 2, fornecedor = "Energia Elétrica S.A.", descricao = "Conta de luz - Nov/2024", valor = 850.30m, vencimento = "2024-12-09", status = "Pendente", categoria = "Utilidades", diasAtraso = 272, createdAt = "05/11/2024", updatedAt = "07/09/2025 21:59" },
                new ContaPagarModel { id = 3, fornecedor = "Telecomunicações XYZ", descricao = "Internet e telefone", valor = 320.00m, vencimento = "2024-12-04", status = "Vencida", categoria = "Telecomunicações", diasAtraso = 0, createdAt = "01/11/2024", updatedAt = "07/09/2025 21:59" },
                new ContaPagarModel { id = 4, fornecedor = "Aluguel Comercial", descricao = "Aluguel loja - Dez/2024", valor = 3500.00m, vencimento = "2024-11-30", status = "Paga", categoria = "Imóveis", diasAtraso = 0, createdAt = "01/11/2024", updatedAt = "07/09/2025 21:59" },
                new ContaPagarModel { id = 5, fornecedor = "Banco do Brasil", descricao = "Empréstimo parcela 12/24", valor = 2100.50m, vencimento = "2024-12-19", status = "Pendente", categoria = "Financiamentos", diasAtraso = 262, createdAt = "01/11/2024", updatedAt = "07/09/2025 21:59" }
            };
        }
    }

    public class ContaPagarModel
    {
        public int id { get; set; }
        public string fornecedor { get; set; } = string.Empty;
        public string descricao { get; set; } = string.Empty;
        public decimal valor { get; set; }
        public string vencimento { get; set; } = string.Empty;
        public string status { get; set; } = string.Empty;
        public string categoria { get; set; } = string.Empty;
        public int diasAtraso { get; set; }
        public string createdAt { get; set; } = string.Empty;
        public string updatedAt { get; set; } = string.Empty;
    }
}
